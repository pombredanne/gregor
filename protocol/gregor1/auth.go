// Auto-generated by avdl-compiler v1.3.3 (https://github.com/keybase/node-avdl-compiler)
//   Input file: gregor1/avdl/auth.avdl

package gregor1

import (
	rpc "github.com/keybase/go-framed-msgpack-rpc"
	context "golang.org/x/net/context"
)

type AuthenticateArg struct {
	Session string `codec:"session" json:"session"`
}

type AuthInterface interface {
	Authenticate(context.Context, string) (UID, error)
}

func AuthProtocol(i AuthInterface) rpc.Protocol {
	return rpc.Protocol{
		Name: "gregor.1.auth",
		Methods: map[string]rpc.ServeHandlerDescription{
			"authenticate": {
				MakeArg: func() interface{} {
					ret := make([]AuthenticateArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]AuthenticateArg)
					if !ok {
						err = rpc.NewTypeError((*[]AuthenticateArg)(nil), args)
						return
					}
					ret, err = i.Authenticate(ctx, (*typedArgs)[0].Session)
					return
				},
				MethodType: rpc.MethodCall,
			},
		},
	}
}

type AuthClient struct {
	Cli rpc.GenericClient
}

func (c AuthClient) Authenticate(ctx context.Context, session string) (res UID, err error) {
	__arg := AuthenticateArg{Session: session}
	err = c.Cli.Call(ctx, "gregor.1.auth.authenticate", []interface{}{__arg}, &res)
	return
}
