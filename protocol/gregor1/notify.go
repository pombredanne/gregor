// Auto-generated by avdl-compiler v1.3.3 (https://github.com/keybase/node-avdl-compiler)
//   Input file: gregor1/avdl/notify.avdl

package gregor1

import (
	rpc "github.com/keybase/go-framed-msgpack-rpc"
	context "golang.org/x/net/context"
)

type NotifyArg struct {
	Md ItemAndMetadata `codec:"md" json:"md"`
}

type NotifyInterface interface {
	Notify(context.Context, ItemAndMetadata) error
}

func NotifyProtocol(i NotifyInterface) rpc.Protocol {
	return rpc.Protocol{
		Name: "gregor.1.notify",
		Methods: map[string]rpc.ServeHandlerDescription{
			"notify": {
				MakeArg: func() interface{} {
					ret := make([]NotifyArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]NotifyArg)
					if !ok {
						err = rpc.NewTypeError((*[]NotifyArg)(nil), args)
						return
					}
					err = i.Notify(ctx, (*typedArgs)[0].Md)
					return
				},
				MethodType: rpc.MethodCall,
			},
		},
	}
}

type NotifyClient struct {
	Cli rpc.GenericClient
}

func (c NotifyClient) Notify(ctx context.Context, md ItemAndMetadata) (err error) {
	__arg := NotifyArg{Md: md}
	err = c.Cli.Call(ctx, "gregor.1.notify.notify", []interface{}{__arg}, nil)
	return
}
